APP_NAME=cinerank
IMAGE?=$(APP_NAME):latest

.PHONY: dev templ css run docker-build docker-run docker-push clean migrate-up migrate-down db-reset

dev:
	@echo "Start dev: run these in separate terminals:"
	@echo "  1) templ generate --watch"
	@echo "  2) npm install && npm run dev:css"
	@echo "  3) make migrate-up (ensure DATABASE_URL is set)"
	@echo "  4) go run ./cmd/server"

templ:
	templ generate

css:
	npm run build:css

run:
	go run ./cmd/server

# Database operations (requires DATABASE_URL environment variable)
migrate-up:
	@powershell -Command "if (-not $$env:DATABASE_URL) { Write-Host 'ERROR: DATABASE_URL environment variable is not set' -ForegroundColor Red; exit 1 }"
	migrate -path ./migrations -database "$(DATABASE_URL)" up

migrate-down:
	@powershell -Command "if (-not $$env:DATABASE_URL) { Write-Host 'ERROR: DATABASE_URL environment variable is not set' -ForegroundColor Red; exit 1 }"
	migrate -path ./migrations -database "$(DATABASE_URL)" down

db-reset:
	@powershell -Command "if (-not $$env:DATABASE_URL) { Write-Host 'ERROR: DATABASE_URL environment variable is not set' -ForegroundColor Red; exit 1 }"
	migrate -path ./migrations -database "$(DATABASE_URL)" down -all
	migrate -path ./migrations -database "$(DATABASE_URL)" up

# Docker operations
docker-build:
	docker build -t $(IMAGE) .

docker-run:
	@echo "Remember to set DATABASE_URL environment variable when running the container"
	docker run --rm -p 8080:8080 -e DATABASE_URL="$(DATABASE_URL)" $(IMAGE)

docker-run-dev:
	docker run --rm -it -p 8080:8080 -e DATABASE_URL="$(DATABASE_URL)" --name cinerank-dev $(IMAGE)

docker-push:
	docker push $(IMAGE)

# Development with Docker Compose (optional)
docker-dev:
	docker-compose -f docker-compose.dev.yml up --build

docker-dev-down:
	docker-compose -f docker-compose.dev.yml down

clean:
	powershell -Command "Remove-Item -Path './tmp', './dist' -Recurse -Force -ErrorAction SilentlyContinue"
	docker image prune -f

# Install development dependencies
install-deps:
	go install github.com/a-h/templ/cmd/templ@latest
	go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
	npm install

# Build for production
build: clean templ css
	set CGO_ENABLED=0 && set GOOS=linux && go build -o server ./cmd/server

# Help
help:
	@echo "CineRank Development Commands:"
	@echo ""
	@echo "Development:"
	@echo "  dev          - Show development startup instructions"
	@echo "  install-deps - Install development dependencies"
	@echo "  templ        - Generate templ templates"
	@echo "  css          - Build Tailwind CSS"
	@echo "  run          - Run the server locally"
	@echo ""
	@echo "Database:"
	@echo "  migrate-up   - Run database migrations"
	@echo "  migrate-down - Rollback database migrations"
	@echo "  db-reset     - Reset database (drop all tables and recreate)"
	@echo ""
	@echo "Docker:"
	@echo "  docker-build - Build Docker image"
	@echo "  docker-run   - Run Docker container (requires DATABASE_URL)"
	@echo "  docker-push  - Push image to registry"
	@echo "  clean        - Clean up build artifacts"
	@echo ""
	@echo "Environment Setup:"
	@echo "  Set DATABASE_URL environment variable to your Neon database URL:"
	@echo "  $env:DATABASE_URL='postgresql://user:password@host/database?sslmode=require'"